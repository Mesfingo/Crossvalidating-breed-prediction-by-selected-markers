# The function takes a file in which the first column has phenotype values and the rest of the columns have genotype values 
# (SNP coded as 0,1,2), performs k-fold crossvalidation and returns 'k' correlation values. For example, for a 5-fold cross 
# validation, the data will be randomly divided into 5 equal parts. Four parts (training set) will be used to train a OLS 
# regression model, and the genotype data in the remaining 1 part (validation set) is used to predict phenotype by fitting 
# in the model generated earlier. Correlation between predicted and recorded penotype value is then computed used as a measure 
# of how good the prediction is. This process is repeated 5 times by rotationally using all 5 parts as validation set. Hence, 
# 5 correlation values are generated by the function for 5-fold cross-validation. 

# description of function arguments:-
# 1. dgdata: genotype data were the first column has phenotype values, and the rest of the columns have SNP data (coded 0,1,2)
# 2. k: the number of 'folds' for a k-fold crossvalidation, (i.e. the number of groups the data will be divided into)
# 3. coln: the number of SNP columns to use. This is useful if this function is put in a loop to perform the crossvalidation 
#          for different number of SNP. If for example 'coln' is 10, only the first 10 SNP are used. In my case SNP are ordered 
#          based on their their contribution to population structure, so the first 10 SNP are the top 10 SNP with  strongest 
#          contribution to population structure. 
# 4. sub: this is a logical(T/F) specifying weather to use a subset of  SNP for crossvalidation. If True, 'coln' has to be specified 
#         and vice versa. The default is False. 

# function output: The function outputs 'k' correlation values for a k-fold crossvalidation  

function(gdata, k = 5, coln, sub = F) {
  
  # if 'sub' is true, select 'coln' SNP columns from gdata
  if(sub){  
  gdata <- gdata[, c(1:(tsnp + 1))]
  }
  
  # randomize the order of rows  
  gdata <- gdata[sample(nrow(gdata)),]
  
  # add a grouping variable with k groups to gdata 
  let <- letters[1:k]
  group <- rep(let, each = floor(nrow(gdata)/k), length.out = nrow(gdata))
  gdata <- cbind(group, gdata)
  
  # do k-fold cross validation and save 'k' correlation/accuracy values in 'correlations'  
  correlations <- sapply(let, function(x){
    train_d <- gdata[!(gdata$group == x), -1]
    pred_d <- gdata[gdata$group == x, -1]
    m <- lm(Angus ~ ., data = train_d)
    cor(predict(m, newdata = pred_d[, -1]), pred_d[, 1], use = "complete.obs", method = "pearson") 
  })
  return(correlations)
}
